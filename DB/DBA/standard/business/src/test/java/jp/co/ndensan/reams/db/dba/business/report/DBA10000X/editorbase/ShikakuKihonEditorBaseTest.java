/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jp.co.ndensan.reams.db.dba.business.report.DBA10000X.editorbase;

import jp.co.ndensan.reams.db.dbz.testhelper.DbaTestBase;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;

/**
 * {@link jp.co.ndensan.reams.db.dba.business.report.DBA10000X.editorbase.ShikakuKihonEditorBase}のテストです。
 *
 * @author n8178 城間篤人
 */
@RunWith(Enclosed.class)
public class ShikakuKihonEditorBaseTest {

    //TODO n8178 城間篤人
    //帳票ソースクラスで、分岐のある編集についてテストを行っている。
    //以下のような手順で実装を行う。
    //
    //1, 業務コンフィグのMockを作成し、分岐に必要な条件を設定する。
    //2, 帳票ソースを作成する上で必要になる、テスト用のModel（jp.co.ndensan.reams.db.dba.model.HihokenshashoModel）を作成する。
    //3, 上記1, 2,を用いて、メソッド名に記述されている内容についてテストを実装する。
    //
    public static class 氏名カナの表示有無 extends DbaTestBase {

        //TODO
        //1, DBA業務コンフィグ：被保険者証表示方法_氏名カナ表示有無の値を取得する。
        //2, 以下のテストを行う。
        //  2-1, 氏名カナ表示有無の値が1の場合、氏名カナにModelが持つ値が入る。
        //  2-2, 氏名カナ表示有無の値が0の場合、氏名カナはEMPTYになる。
    }

    public static class 住所の表示切替 extends DbaTestBase {

        //TODO
        //1, 以下の業務コンフィグを取得する。
        //  DBA業務コンフィグ
        //      被保険者証表示方法_管内住所編集_帳票独自区分
        //      被保険者証表示方法_管内住所編集_都道府県名付与有無
        //      被保険者証表示方法_管内住所編集_群名付与有無
        //      被保険者証表示方法_管内住所編集_市町村名付与有無
        //      被保険者証表示方法_管内住所編集_編集方法
        //      被保険者証表示方法_管内住所編集_方書表示有無
        //  DBU業務コンフィグ
        //      帳票共通住所編集方法_管内住所編集_都道府県名付与有無
        //      帳票共通住所編集方法_管内住所編集_群名付与有無
        //      帳票共通住所編集方法_管内住所編集_市町村名付与有無
        //      帳票共通住所編集方法_管内住所編集_編集方法
        //      帳票共通住所編集方法_管内住所編集_方書表示有無
        //2, 以下のテストを行う。
        //  2-1, 被保険者証表示方法_管内住所編集_帳票独自区分が1の場合
        //       帳票独自区分が1の場合、DBAスタンダードコンフィグの値が判定で使用される。
        //      2-1-1, 被保険者証表示方法_管内住所編集_都道府県名付与有無
        //          2-1-1-1, 都道府県名付与有無が1の場合、住所に都道府県の情報が追加される。
        //          2-1-1-2, 都道府県名付与有無が0の場合、住所に都道府県の情報を付与しない。
        //      2-1-2, 被保険者証表示方法_管内住所編集_群名付与有無
        //          2-1-2-1, 群名付与有無が1の場合、住所に群名の情報が追加される。
        //          2-1-2-2, 群名付与有無が0の場合、住所に群名の情報を付与しない。
        //      2-1-3, 被保険者証表示方法_管内住所編集_市町村名付与有無
        //          2-1-3-1, 市町村名付与有無が1の場合、住所に市町村名の情報が追加される。
        //          2-1-3-2, 市町村名付与有無が0の場合、住所に市町村名の情報を付与しない。
        //      2-1-4, 被保険者証表示方法_管内住所編集_編集方法
        //          2-1-4-1, 編集方法が1の場合、[住所＋番地]というように住所を編集する。
        //          2-1-4-2, 編集方法が2の場合、[行政区＋番地]というように住所を編集する。
        //          2-1-4-3, 編集方法が3の場合、[住所＋番地、（行政区）]というように住所を編集する。
        //          2-1-4-4, 編集方法が4の場合、[番地]のみを住所に持つ。
        //          2-1-4-5, 編集方法が5の場合、住所は印字されない（EMPTYになる）。
        //      2-1-5, 被保険者証表示方法_管内住所編集_方書表示有無
        //          2-1-5-1, 方書表示有無が1の場合、住所に方書の情報が追加される。
        //          2-1-5-2, 方書表示有無が0の場合、住所に方書の情報を付与しない。
        //  2-2, 被保険者証表示方法_管内住所編集_帳票独自区分が0の場合
        //       帳票独自区分が0の場合、DBUスタンダードコンフィグの値が判定で使用される。
        //      2-2-1, 帳票共通住所編集方法_管内住所編集_都道府県名付与有無
        //          2-2-1-1, 都道府県名付与有無が1の場合、住所に都道府県の情報が追加される。
        //          2-2-1-2, 都道府県名付与有無が0の場合、住所に都道府県の情報を付与しない。
        //      2-2-2, 帳票共通住所編集方法_管内住所編集_群名付与有無
        //          2-2-2-1, 群名付与有無が1の場合、住所に群名の情報が追加される。
        //          2-2-2-2, 群名付与有無が0の場合、住所に群名の情報を付与しない。
        //      2-2-3, 帳票共通住所編集方法_管内住所編集_市町村名付与有無
        //          2-2-3-1, 市町村名付与有無が1の場合、住所に市町村名の情報が追加される。
        //          2-2-3-2, 市町村名付与有無が0の場合、住所に市町村名の情報を付与しない。
        //      2-2-4, 帳票共通住所編集方法_管内住所編集_編集方法
        //          2-2-4-1, 編集方法が1の場合、[住所＋番地]というように住所を編集する。
        //          2-2-4-2, 編集方法が2の場合、[行政区＋番地]というように住所を編集する。
        //          2-2-4-3, 編集方法が3の場合、[住所＋番地、（行政区）]というように住所を編集する。
        //          2-2-4-4, 編集方法が4の場合、[番地]のみを住所に持つ。
        //          2-2-4-5, 編集方法が5の場合、住所は印字されない（EMPTYになる）。
        //      2-2-5, 帳票共通住所編集方法_管内住所編集_方書表示有無
        //          2-2-5-1, 方書表示有無が1の場合、住所に方書の情報が追加される。
        //          2-2-5-2, 方書表示有無が0の場合、住所に方書の情報を付与しない。
    }

    public static class 被保険者番号の前ゼロ印字切り替え extends DbaTestBase {

        //TODO
        //1, DBA業務コンフィグ：被保険者証表示方法_被保険者番号表示書式の値を取得する。
        //2, 以下のテストを行う。
        //  2-1, 被保険者番号表示書式の値が1の場合、被保険者番号の前ゼロを、全て空白に編集する。
        //  2-2, 被保険者番号表示書式の値が2の場合、被保険者番号の前ゼロはそのままで帳票ソースに渡される。
    }

    public static class 郵便番号の印字切り替え extends DbaTestBase {

        //TODO
        //1, DBA業務コンフィグ：被保険者証表示方法_郵便番号表示有無の値を取得する。
        //2, 以下のテストを行う。
        //  2-1, 郵便番号表示有無の値が1の場合、郵便番号が帳票ソースに渡される。
        //  2-2, 郵便番号表示有無の値が0の場合、郵便番号は帳票ソースに渡されず、EMPTYとなる。
        //3, さらに、郵便番号が印字される場合（郵便番号表示有無の値が1の場合）以下のテストを行う。
        //  3-1, 郵便番号の値が空である場合、郵便番号は帳票ソースに渡されず、EMPTYとなる。
        //  3-2, 郵便番号の値が3桁である場合、郵便番号は[XXX]と編集される。
        //  3-3, 郵便番号の値が5桁である場合、郵便番号は[XXX-XX]と編集される。
        //  3-4, 郵便番号の値が7桁である場合、郵便番号は[XXX-XXXX]と編集される。
    }

    public static class 再交付の印字切替 extends DbaTestBase {
        //TODO
        //以下のテストを行う。
        //1, 証発行の事由が再交付である場合、以下の項目に対して"再交付"が設定される。
        //  source.saikofu11、source.saikofu21
        //2, 証発行の事由が再交付以外である場合、何も行われない。
    }

}
