package jp.co.ndensan.reams.db.dbc.definition.core.tokeihyo;

import jp.co.ndensan.reams.ur.urz.definition.message.UrSystemErrorMessages;
import jp.co.ndensan.reams.uz.uza.lang.RString;

/**
 * 統計用サービス種類を表す列挙型です。
 *
 * @reamsid_L DBC-9999-022 sunhaidi
 */
public enum TokeiServiceShurui {

    /**
     * コード:01 名称:(介護予防)訪問介護 略称:定義なし Y軸:0 統計表印字名称1:（介護予防） 統計表印字名称2:＿訪問介護
     * 統計表印字名称3:EMPTY
     */
    _介護予防_訪問介護("01", "(介護予防)訪問介護", 0, get介護予防(), "　訪問介護", ""),
    /**
     * コード:02 名称:(介護予防)訪問入浴介護 略称:定義なし Y軸:1
     */
    _介護予防_訪問入浴介護("02", "(介護予防)訪問入浴介護", 1, get介護予防(), "訪問入力介護", ""),
    /**
     * コード:03 名称:(介護予防)訪問看護 略称:定義なし Y軸:2
     */
    _介護予防_訪問看護("03", "(介護予防)訪問看護", 2, get介護予防(), "　訪問看護", ""),
    /**
     * コード:04 名称:(介護予防)訪問リハビリ 略称:定義なし Y軸:3
     */
    _介護予防_訪問リハビリ("04", "(介護予防)訪問リハビリ", 3, get介護予防(), "訪問リバビリ", ""),
    /**
     * コード:05 名称:(介護予防)通所介護 略称:定義なし Y軸:4
     */
    _介護予防_通所介護("05", "(介護予防)通所介護", 4, get介護予防(), "　通所介護", ""),
    /**
     * コード:06 名称:(介護予防)通所リハビリ 略称:定義なし Y軸:5
     */
    _介護予防_通所リハビリ("06", "(介護予防)通所リハビリ", 5, get介護予防(), "通所リハビリ", ""),
    /**
     * コード:07 名称:(介護予防)福祉用具貸与 略称:定義なし Y軸:6
     */
    _介護予防_福祉用具貸与("07", "(介護予防)福祉用具貸与", 6, get介護予防(), "福祉用具貸与", ""),
    /**
     * コード:08 名称:(介護予防)短期入所生活介護 略称:定義なし Y軸:7
     */
    _介護予防_短期入所生活介護("08", "(介護予防)短期入所生活介護", 7, get介護予防(), "　短期入所", "　生活介護"),
    /**
     * コード:09 名称:(介護予防)短期入所老健施設 略称:定義なし Y軸:8
     */
    _介護予防_短期入所老健施設("09", "(介護予防)短期入所老健施設", 8, get介護予防(), "　短期入所", "　老健施設"),
    /**
     * コード:10 名称:(介護予防)短期入所医療施設 略称:定義なし Y軸:9
     */
    _介護予防_短期入所医療施設("10", "(介護予防)短期入所医療施設", 9, get介護予防(), "　短期入所", "　医療施設"),
    /**
     * コード:11 名称:(介護予防)居宅療養管理指導 略称:定義なし Y軸:10
     */
    _介護予防_居宅療養管理指導("11", "(介護予防)居宅療養管理指導", 10, get介護予防(), "　居宅療養", "　管理指導"),
    /**
     * コード:12 名称:(介護予防)特定施設生活介護（短期以外） 略称:定義なし Y軸:11
     */
    _介護予防_特定施設生活介護_短期以外("12", "(介護予防)特定施設生活介護（短期以外）", 11, get介護予防(), "特定施設生活介護", "（短期以外）"),
    /**
     * コード:13 名称:(介護予防)特定施設生活介護（短期） 略称:定義なし Y軸:12
     */
    _介護予防_特定施設生活介護_短期("13", "(介護予防)特定施設生活介護（短期）", 12, get介護予防(), "特定施設生活介護", "（短期）"),
    /**
     * コード:14 名称:居宅サービス計（1-13の合計） 略称:定義なし Y軸:13
     */
    居宅サービス計_1_13の合計("14", "居宅サービス計（1-13の合計）", 13, "居宅サービス計", "１－１３の合計", ""),
    /**
     * コード:15 名称:介護福祉施設 略称:定義なし Y軸:14
     */
    介護福祉施設("15", "介護福祉施設", 14, "介護福祉施設", "", ""),
    /**
     * コード:16 名称:介護老健施設 略称:定義なし Y軸:15
     */
    介護老健施設("16", "介護老健施設", 15, "介護老健施設", "", ""),
    /**
     * コード:17 名称:介護医療施設 略称:定義なし Y軸:16
     */
    介護医療施設("17", "介護医療施設", 16, "介護医療施設", "", ""),
    /**
     * コード:18 名称:施設サービス計（15-17の合計） 略称:定義なし Y軸:17
     */
    施設サービス計_15_17の合計("18", "施設サービス計（15-17の合計）", 17, "施設サービス計", "１５－１７の合計", ""),
    /**
     * コード:19 名称:夜間対応型訪問介護 略称:定義なし Y軸:18
     */
    夜間対応型訪問介護("19", "夜間対応型訪問介護", 18, "夜間対応型", "訪問介護", ""),
    /**
     * コード:20 名称:(介護予防)認知症対応型通所介護 略称:定義なし Y軸:19
     */
    _介護予防_認知症対応型通所介護("20", "(介護予防)認知症対応型通所介護", 19, get介護予防(), "認知症対応型", "通所介護"),
    /**
     * コード:21 名称:(介護予防)小規模多機能型居宅介護（短期以外） 略称:定義なし Y軸:20
     */
    _介護予防_小規模多機能型居宅介護_短期以外("21", "(介護予防)小規模多機能型居宅介護（短期以外）", 20, get介護予防(), "小規模多機能型居", "宅介護・短期以外"),
    /**
     * コード:22 名称:(介護予防)小規模多機能型居宅介護（短期） 略称:定義なし Y軸:21
     */
    _介護予防_小規模多機能型居宅介護_短期("22", "(介護予防)小規模多機能型居宅介護（短期）", 21, get介護予防(), "小規模多機能型居", "宅介護・短期"),
    /**
     * コード:23 名称:(介護予防)認知症対応型共同生活 略称:定義なし Y軸:22
     */
    _介護予防_認知症対応型共同生活("23", "(介護予防)認知症対応型共同生活", 22, get介護予防(), "認知症対応型", "共同生活"),
    /**
     * コード:24 名称:地域密着型特定施設入居者生活（短期以外） 略称:定義なし Y軸:23
     */
    地域密着型特定施設入居者生活_短期以外("24", "地域密着型特定施設入居者生活（短期以外）", 23, get地域密着型(), get特定施設入居者(), "生活・短期以外"),
    /**
     * コード:25 名称:地域密着型特定施設入居者生活（短期） 略称:定義なし Y軸:24
     */
    地域密着型特定施設入居者生活_短期("25", "地域密着型特定施設入居者生活（短期）", 24, get地域密着型(), get特定施設入居者(), "生活・短期"),
    /**
     * コード:26 名称:(介護予防)認知症対応型共同生活(短期) 略称:定義なし Y軸:25
     */
    _介護予防_認知症対応型共同生活_短期("26", "(介護予防)認知症対応型共同生活(短期)", 25, get介護予防(), "認知症対応型", "共同生活・短期"),
    /**
     * コード:27 名称:地域密着型介護老人福祉施設 略称:定義なし Y軸:26
     */
    地域密着型介護老人福祉施設("27", "地域密着型介護老人福祉施設", 26, get地域密着型(), "介護老人", "福祉施設"),
    /**
     * コード:28 名称:定期巡回・随時対応型訪問介護看護 略称:定義なし Y軸:27
     */
    定期巡回_随時対応型訪問介護看護("28", "定期巡回・随時対応型訪問介護看護", 27, "定期巡回・", "随時対応型", "訪問介護看護"),
    /**
     * コード:29 名称:看護小規模多機能型居宅介護（短期以外） 略称:定義なし Y軸:28
     */
    看護小規模多機能型居宅介護_短期以外("29", "看護小規模多機能型居宅介護（短期以外）", 28, "看護小規模", "多機能型居宅介護", "（短期以外）"),
    /**
     * コード:30 名称:看護小規模多機能型居宅介護（短期） 略称:定義なし Y軸:29
     */
    看護小規模多機能型居宅介護_短期("30", "看護小規模多機能型居宅介護（短期）", 29, "看護小規模", "多機能型居宅介護", "（短期）"),
    /**
     * コード:31 名称:地域密着型通所介護 略称:定義なし Y軸:30
     */
    地域密着型通所介護("31", "地域密着型通所介護", 30, get地域密着型(), "通所介護", ""),
    /**
     * コード:32 名称:地域密着型施設サービス計（19-31の合計） 略称:定義なし Y軸:1
     */
    地域密着型施設サービス計_19_31の合計("32", "地域密着型施設サービス計（19-31の合計）", 31, get地域密着型(), "施設サービス計", "１９－３１の合計"),
    /**
     * コード:33 名称:居宅介護支援介護要望支援 略称:定義なし Y軸:31
     */
    居宅介護支援介護要望支援("33", "居宅介護支援介護要望支援", 32, "居宅介護支援", "介護要望支援", ""),
    /**
     * コード:34 名称:(介護予防)特定福祉用具販売費 略称:定義なし Y軸:32
     */
    _介護予防_特定福祉用具販売費("34", "(介護予防)特定福祉用具販売費", 33, get介護予防(), "特定福祉用具", "販売費"),
    /**
     * コード:35 名称:(介護予防)住宅改修費 略称:定義なし Y軸:33
     */
    _介護予防_住宅改修費("35", "(介護予防)住宅改修費", 34, get介護予防(), "住宅改修費", ""),
    /**
     * コード:36 名称:介護給付費計 略称:定義なし Y軸:34
     */
    介護給付費計("36", "介護給付費計", 35, "介護給付費計", "", ""),
    /**
     * コード:37 名称:特定入所者 略称:定義なし Y軸:36
     */
    特定入所者("37", "特定入所者", 36, "特定入所者", "", ""),
    /**
     * コード:38 名称:社福 略称:定義なし Y軸:37
     */
    社福("38", "社福", 37, "社福", "", ""),
    /**
     * コード:39 名称:市町村特別給付 略称:定義なし Y軸:38
     */
    市町村特別給付("39", "市町村特別給付", 38, "市町村特別給付", "", "");

    private final RString code;
    private final RString fullName;
    private final int yZiku;
    private final RString toukeihyouName1;
    private final RString toukeihyouName2;
    private final RString toukeihyouName3;

    /**
     * 介護予防を返します。
     *
     * @return 介護予防
     */
    public static String get介護予防() {
        RString 介護予防 = new RString("（介護予防）");
        return 介護予防.toString();
    }

    /**
     * 地域密着型を返します。
     *
     * @return 地域密着型
     */
    public static String get地域密着型() {
        RString 地域密着型 = new RString("地域密着型");
        return 地域密着型.toString();
    }

    /**
     * 特定施設入居者を返します。
     *
     * @return 特定施設入居者
     */
    public static String get特定施設入居者() {
        RString 特定施設入居者 = new RString("特定施設入居者");
        return 特定施設入居者.toString();
    }

    private TokeiServiceShurui(String code, String fullname, int yZiku,
            String toukeihyouName1, String toukeihyouName2, String toukeihyouName3) {
        this.code = new RString(code);
        this.fullName = new RString(fullname);
        this.yZiku = yZiku;
        this.toukeihyouName1 = new RString(toukeihyouName1);
        this.toukeihyouName2 = new RString(toukeihyouName2);
        this.toukeihyouName3 = new RString(toukeihyouName3);
    }

    /**
     * 統計用サービス種類のコードを返します。
     *
     * @return 統計用サービス種類のコード
     */
    public RString getコード() {
        return code;
    }

    /**
     * 統計用サービス種類の名称を返します。
     *
     * @return 統計用サービス種類の名称
     */
    public RString get名称() {
        return fullName;
    }

    /**
     * 統計用サービス種類のY軸を返します。
     *
     * @return 統計用サービス種類のY軸
     */
    public int getY軸() {
        return yZiku;
    }

    /**
     * 統計用サービス種類の統計表印字名称1を返します。
     *
     * @return 統計用サービス種類の統計表印字名称1
     */
    public RString get統計表印字名称1() {
        return toukeihyouName1;
    }

    /**
     * 統計用サービス種類の統計表印字名称2を返します。
     *
     * @return 統計用サービス種類の統計表印字名称2
     */
    public RString get統計表印字名称2() {
        return toukeihyouName2;
    }

    /**
     * 統計用サービス種類の統計表印字名称3を返します。
     *
     * @return 統計用サービス種類の統計表印字名称3
     */
    public RString get統計表印字名称3() {
        return toukeihyouName3;
    }

    /**
     * 統計用サービス種類のコードと一致する内容を探します。
     *
     * @param code 統計用サービス種類のコード
     * @return {@code code} に対応する統計用サービス種類
     */
    public static TokeiServiceShurui toValue(RString code) {
        for (TokeiServiceShurui tokeiServiceShurui : TokeiServiceShurui.values()) {
            if (tokeiServiceShurui.code.equals(code)) {
                return tokeiServiceShurui;
            }
        }
        throw new IllegalArgumentException(UrSystemErrorMessages.変換不可.getMessage());
    }
}
