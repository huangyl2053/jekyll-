package jp.co.ndensan.reams.db.dbb.definition.core.fuka;

import jp.co.ndensan.reams.ur.urz.definition.message.UrSystemErrorMessages;
import jp.co.ndensan.reams.uz.uza.lang.RString;

/**
 * 保険料段階パターンを表す列挙型です。
 *
 * @reamsid_L DBB-9999-023 liangbc
 */
public enum HokenryoDankaiPattern {

    /**
     * コード:1 名称:パターン無し 略称:パターン無し
     */
    パターン無し("1", "パターン無し", "パターン無し"),
    /**
     * コード:2 名称:_2009_パターン1 略称:2009_本人非課税の軽減措置なし
     */
    _2009_本人非課税の軽減措置なし("2", "_2009_パターン1", "2009_本人非課税の軽減措置なし"),
    /**
     * コード:3 名称:_2009_パターン2 略称:2009_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階
     */
    _2009_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階("3", "_2009_パターン2", "2009_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階"),
    /**
     * コード:4 名称:_2009_パターン3 略称:2009_本人非課税の軽減措置あり_本人非課税の段階表記が別段階
     */
    _2009_本人非課税の軽減措置あり_本人非課税の段階表記が別段階("4", "_2009_パターン3", "2009_本人非課税の軽減措置あり_本人非課税の段階表記が別段階"),
    /**
     * コード:5 名称:_2012_パターン1 略称:2012_世帯非課税の軽減措置なし_本人非課税の軽減措置なし
     */
    _2012_世帯非課税の軽減措置なし_本人非課税の軽減措置なし("5", "_2012_パターン1", "2012_世帯非課税の軽減措置なし_本人非課税の軽減措置なし"),
    /**
     * コード:6 名称:_2012_パターン2 略称:2012_世帯非課税の軽減措置なし_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階
     */
    _2012_世帯非課税の軽減措置なし_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階(
            "6", "_2012_パターン2", "2012_世帯非課税の軽減措置なし_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階"),
    /**
     * コード:7 名称:_2012_パターン3 略称:2012_世帯非課税の軽減措置なし_本人非課税の軽減措置あり_本人非課税の段階表記が別段階
     */
    _2012_世帯非課税の軽減措置なし_本人非課税の軽減措置あり_本人非課税の段階表記が別段階(
            "7", "_2012_パターン3", "2012_世帯非課税の軽減措置なし_本人非課税の軽減措置あり_本人非課税の段階表記が別段階"),
    /**
     * コード:8 名称:_2012_パターン4 略称:2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置なし
     */
    _2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置なし(
            "8", "_2012_パターン4", "2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置なし"),
    /**
     * コード:9 名称:_2012_パターン5 略称:2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階
     */
    _2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階(
            "9", "_2012_パターン5", "2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階"),
    /**
     * コード:10 名称:_2012_パターン6 略称:2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置あり_本人非課税の段階表記が別段階
     */
    _2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置あり_本人非課税の段階表記が別段階(
            "10", "_2012_パターン6", "2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が同一段階_本人非課税の軽減措置あり_本人非課税の段階表記が別段階"),
    /**
     * コード:11 名称:_2012_パターン7 略称:2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置なし
     */
    _2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置なし(
            "11", "_2012_パターン7", "2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置なし"),
    /**
     * コード:12 名称:_2012_パターン8 略称:2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階
     */
    _2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階(
            "12", "_2012_パターン8", "2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置あり_本人非課税の段階表記が同一段階"),
    /**
     * コード:13 名称:_2012_パターン9 略称:2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置あり_本人非課税の段階表記が別段階
     */
    _2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置あり_本人非課税の段階表記が別段階(
            "13", "_2012_パターン9", "2012_世帯非課税の軽減措置あり_世帯非課税の段階表記が別段階_本人非課税の軽減措置あり_本人非課税の段階表記が別段階");

    private final RString code;
    private final RString fullName;
    private final RString shortName;

    private HokenryoDankaiPattern(String code, String fullname, String shortName) {
        this.code = new RString(code);
        this.fullName = new RString(fullname);
        this.shortName = new RString(shortName);
    }

    /**
     * 保険料段階パターンのコードを返します。
     *
     * @return 保険料段階パターンのコード
     */
    public RString getコード() {
        return code;
    }

    /**
     * 保険料段階パターンの名称を返します。
     *
     * @return 保険料段階パターンの名称
     */
    public RString get名称() {
        return fullName;
    }

    /**
     * 保険料段階パターンの略称を返します。
     *
     * @return 保険料段階パターンの略称
     */
    public RString get略称() {
        return shortName;
    }

    /**
     * 保険料段階パターンのコードと一致する内容を探します。
     *
     * @param code 保険料段階パターンのコード
     * @return {@code code} に対応する保険料段階パターン
     */
    public static HokenryoDankaiPattern toValue(RString code) {
        for (HokenryoDankaiPattern hokenryoDankaiPattern : HokenryoDankaiPattern.values()) {
            if (hokenryoDankaiPattern.code.equals(code)) {
                return hokenryoDankaiPattern;
            }
        }
        throw new IllegalArgumentException(UrSystemErrorMessages.変換不可.getReplacedMessage("保険料段階パターン"));
    }
}
